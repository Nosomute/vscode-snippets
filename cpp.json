{
    // cpp
    "cpp estructure": {
        //"scope": "cpp",
        "prefix": "cpp",
        "body": [
            "#include <iostream>",
            "#include <string>\n",
            "using namespace std;\n\n$0\n",
            "int main()",
            "{",
            "\t\n",
            "\treturn 0;\n}",
        ]
    },
    "class strcuture": {
        "prefix": "class ",
        "body": [
            "class ${1:Clase}",
            "{",
            "private:",
            "    ${3:}",
            "public:",
            "    ${1:}(${4:});",
            "$0",
            "};",
            "",
            "${1:}::${1:}(${4:})",
            "{",
            "}",
        ]
    },
    "subClass strcuture": {
        "prefix": "subClass",
        "body": [
            "class ${1:subClase} : public ${2:Clase}",
            "{",
            "private:",
            "    ${3:}",
            "public:",
            "    ${1:}(${4:});",
            "$0",
            "};",
            "",
            "${1:}::${1:}(${4:})",
            "{",
            "}",
        ]
    },
    "int main()": {
        "prefix": "int main()",
        "body": [
            "int main()",
            "{",
            "\t$0\n",
            "\treturn 0;\n}",
        ],
    },
    "cout << ": {
        "prefix": "cout << ",
        "body": [
            "cout << ${1:\"${0:}\"};",
        ],
    },
    "using namespace std;": {
        "prefix": "using namespace std;",
        "body": [
            "using namespace std;\n",
            "$0",
        ],
    },
    "cin >> ": {
        "prefix": "cin >> ",
        "body": [
            "cin >> ${0:};",
        ],
    },
    "#include": {
        "prefix": "#include",
        "body": [
            "#include $0\n",
        ],
    },
    "case": {
        "prefix": "case ",
        "body": [
            "case ${2:'${1:}'}:\n\t$0",
            "\tbreak;\n",
        ],
    },
    "<< \"\"": {
        "prefix": "<< \"\"",
        "body": [
            " << ${1:\"${0:}\"}",
        ]
    },
    "<< endl": {
        "prefix": "<< endl",
        "body": [
            " << endl",
        ]
    },
    "cin.getline ": {
        "prefix": "cin.getline",
        "body": [
            "cin.getline(${1:/*place*/},${0:/*size*/},'\\n');",
        ],
        "description": "para tipo char"
    },
    "getline(cin)": {
        "prefix": "getline(cin, );",
        "body": [
            "getline(cin, ${0:/*place*/});",
        ],
        "description": "para tipo string"
    },
    "void()": {
        "prefix": "void ",
        "body": [
            "void $1($0);",
        ],
    },
    "stack": {
        "prefix": "stack",
        "body": [
            "#include <stdlib.h>\n",
            "struct Nodo{",
            "\tint dato;",
            "\tNodo *siguiente;",
            "}*pila,*nuevo_nodo,*aux;",
            "\nvoid agregarPila(Nodo *&, int);",
            "void sacarPila(Nodo *&, int &);",
            "\nint dato;//main",
            "pila = NULL; cin >> dato;//main",
            "agregarPila(pila, dato);//main",
            "sacarPila(pila, dato);//main",
            "\nvoid agregarPila(Nodo *&pila, int n){",
            "\tnuevo_nodo = new Nodo();",
            "\tnuevo_nodo->dato = n;",
            "\tnuevo_nodo->siguiente = pila;",
            "\tpila = nuevo_nodo;}",
            "\nvoid sacarPila(Nodo *&pila, int &n){",
            "\twhile (pila != NULL){",
            "\t\taux = pila;",
            "\t\tn = aux->dato;",
            "\t\tpila = aux->siguiente;",
            "\t\tcout << dato <<\" \";}",
            "\t\tdelete aux;}",
            "",
            "",
        ],
    },
    "queues": {
        "prefix": "queues",
        "body": [
            "#include <stdlib.h>\n",
            "struct Nodo{",
            "int dato;",
            "Nodo *siguiente;};",
            "void insertaCola(Nodo *&, Nodo *&, int);",
            "void suprimirCola(Nodo *&, Nodo *&, int &);",
            "void mostrarCola(Nodo *&, Nodo *&, int &);",
            "int dato;",
            "\nNodo *frente = NULL;//main",
            "Nodo *fin = NULL;//main",
            "cin >> dato;//main",
            "insertaCola(frente, fin, dato);//main",
            "mostrarCola(frente, fin, dato);//main",
            "suprimirCola(frente, fin, dato);//main",
            "\nvoid insertaCola(Nodo *&frente, Nodo *&fin, int n){",
            "Nodo *nuevo_nodo = new Nodo();",
            "nuevo_nodo->dato = n;",
            "nuevo_nodo->siguiente = NULL;",
            "\nif (frente == NULL){frente = nuevo_nodo;}",
            "else{fin->siguiente = nuevo_nodo;}",
            "fin = nuevo_nodo};",
            "\nvoid mostrarCola(Nodo *&frente, Nodo *&fin, int &n){",
            "n = frente->dato;",
            "Nodo *aux = frente;}",
            "cout << aux->dato << \" \";",
            "aux = aux->siguiente;",
            "\nvoid suprimirCola(Nodo *&frente, Nodo *&fin, int &n){",
            "while (frente != NULL)",
            "n = frente->dato;",
            "Nodo *aux = frente;",
            "if (frente == fin){frente = NULL;fin = NULL;",
            "else{frente = frente->siguiente;}",
            "delete aux;",
            "cout << dato << \" \";}}",
        ],
    },
    "bubble sort 1": {
        "prefix": "bubble sort 1",
        "body": [
            "int aux,tam,i,j; cin>>tam; cout<<endl;",
            "int array[tam]={};",
            "for(i=0;i<tam;i++){//fill array",
            "\tcin>>array[i];}; cout<<endl;",
            "\nfor(i=0;i<tam;i++){//bubble sort",
            "\tfor(j=0;j<tam-1;j++){",
            "\t\tif(array[j] > array[j+1]){",
            "\t\t\taux = array[j];",
            "\t\t\tarray[j] = array[j+1];",
            "\t\t\tarray[j+1] = aux;}}}\n",
            "for(i=0;i<tam;i++){//output ascending",
            "\tcout<<array[i]<<\" \";} cout<<endl;",
            "for(i=tam-1;i>=0;i--){//output descending",
            "\tcout<<array[i]<<\" \";} cout<<endl;",
        ]
    },
    "bubble sort 2": {
        "prefix": "bubble_sort 2",
        "body": [
            "int aux,size,i,j; cin>>size; cout<<endl;",
            "int array[size]={};",
            "bool flag;",
            "for(i=0;i<size;i++){//fill array",
            "\tcin>>array[i];}; cout<<endl;",
            "\nfor(i=1;i<size;i++){//bubble sort",
            "flag = false;",
            "\tfor(j=size-1;j>=i;j--){",
            "\t\tif(array[j-1] > array[j]){",
            "\t\t\taux = array[j-1];",
            "\t\t\tarray[j-1] = array[j];",
            "\t\t\tarray[j] = aux;",
            "\t\t\tflag = true;}}",
            "\t\t\tif(flag==false) break;}",
            "\nfor(i=0;i<size;i++){//output ascending",
            "\tcout<<array[i]<<\" \";} cout<<endl;",
            "for(i=size-1;i>=0;i--){//output descending",
            "\tcout<<array[i]<<\" \";} cout<<endl;",
        ]
    },
    "selection sort": {
        "prefix": "selection_sort",
        "body": [
            "int i,j,aux,min,size; cin>>size; cout<<endl;",
            "int array[size]={};",
            "\nfor(i=0;i<size;i++){//fill array",
            "\tcin>>array[i];}; cout<<endl;",
            "\nfor(i=0;i<size;i++){min = i;//selection sort",
            "for(j=i+1;j<size;j++){",
            "\t\tif(array[j] < array[min]){min = j;}}",
            "\t\t\taux = array[i];",
            "\t\t\tarray[i] = array[min];",
            "\t\t\tarray[min] = aux;}",
            "\nfor(i=0;i<size;i++){//output ascending",
            "\tcout<<array[i]<<\" \";}cout<<endl;",
            "\nfor(i=size-1;i>=0;i--){//output descending",
            "\tcout<<array[i]<<\" \";}cout<<endl;",
        ]
    },
    "insertion_sort": {
        "prefix": "insertion_sort",
        "body": [
            "int i,aux,pos,size; cin>>size; cout<<endl;",
            "int array[size]={};",
            "\nfor(i=0;i<size;i++){//fill array",
            "\tcin>>array[i];}; cout<<endl;",
            "\nfor(i=0;i<size;i++){pos = i; aux = array[i];",
            "while((pos>0) && (array[pos-1] > aux)){",
            "\tarray[pos] = array[pos-1]; pos--;}",
            "\tarray[pos] = aux;}//insertion sort",
            "\nfor(i=0;i<size;i++){//output ascending",
            "\tcout<<array[i]<<\" \";}cout<<endl;",
            "for(i=size-1;i>=0;i--){//output descending",
            "\tcout<<array[i]<<\" \";}cout<<endl;",
        ]
    },
    "sequential_search": {
        "prefix": "sequential_search",
        "body": [
            "int i,dato,size;",
            "cin>>size; cout<<endl;",
            "int array[size];",
            "char flag = 'F';",
            "\nfor(i=0;i<size;i++){//fill array",
            "\tcin>>array[i];};cout<<endl;",
            "cin>>dato;i=0;",
            "\nwhile((flag == 'F') && (i<size)){",
            "\tif(array[i] == dato)",
            "\t{flag = 'V';} i++;}//searching",
            "\nif(flag == 'F'){",
            "\tcout<<\"value not found\"<<endl;}",
            "else if(flag == 'V'){",
            "\tcout<<\"found value at index \"<<i-1;}",
        ],
    },
    "binary_search": {
        "prefix": "binary_search",
        "body": [
            "int i=0,inf,sup,half,dato,size;",
            "char flag='F'; cin>>size; cout<<endl;",
            "int array[size]; inf=0; sup=size;",
            "\nfor(i=0;i<size;i++){//fill array",
            "\tcin>>array[i];};cout<<endl;",
            "cin>>dato;i=0;",
            "\nwhile((inf<=sup)&&(i<size))",
            "{half = (inf+sup)/2;//searching",
            "\tif(array[half] == dato)",
            "\t\t{flag='V'; break;}",
            "\tif(array[half]>dato)",
            "\t\t{sup = half; half=(inf+sup)/2;}",
            "\tif(array[half]<dato)",
            "\t\t{inf = half; half=(inf+sup)/2;}i++;}",
            "\nif(flag == 'V'){",
            "\tcout<<\"found value at index \"<<half<<endl;}",
            "else{cout<<\"value not found\";}",
        ]
    },
    "snippets credits": {
        "prefix": "snippets credits",
        "body": [
            "/*",
            "/* Snippets cpp [Version 1.2.0]",
            "Last update 16-10-2023 */",
            "By Anthony Vasquez [Thony764]",
            "Todos los derechos reservados",
            "Copyright @2022",
            "/*",
        ]
    },
}