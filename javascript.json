
{
    //js    
	"Print to console": {
        "prefix": [
            "console.log",
            "log",
        ],
        "body": [
            "console.log(${1:\"${2:}\"});",
        ],
    },

    "Print to console ``": {
        "prefix": [
            "sconsole.log",
            "slog",
        ],
        "body": [
            "console.log(`$0`);",
        ],
    },
    "Print info to console ": {
        "prefix": [
            "info",
            "console.info"
        ],
        "body": [
            "console.info(\"$0\");"
        ]
    },
    "Print info to console ``": {
        "prefix": [
            "sinfo",
            "sconsole.info"
        ],
        "body": [
            "console.info(`$0`);"
        ]
    },
    "Print warning to console": {
        "prefix": [
            "warn",
            "console.warn"
        ],
        "body": [
            "console.warn(\"$0\");"
        ]
    },
    "Print warning to console ``": {
        "prefix": [
            "swarn",
            "sconsole.warn"
        ],
        "body": [
            "console.warn(`$0`);"
        ]
    },
    "Print error to console": {
        "prefix": [
            "error",
            "console.error"
        ],
        "body": [
            "console.error(\"$0\");"
        ]
    },
    "Print error to console ``": {
        "prefix": [
            "serror",
            "sconsole.error"
        ],
        "body": [
            "console.error(`$0`);"
        ]
    },
    "${}": {
        "prefix": "s",
        "body": "${$1} $0"
    },
    "else{}": {
        "prefix": "else",
        "body": [
            "else {\n\t$0\n}"
        ]
    },
    "if()?:": {
        "prefix": [
            "ifternary",
            "if()?:",
        ],
        "body": [
            "(${1:condition}) ? ${2:ifTrue} : ${3:ifFalse};"
        ]
    },
    "()=>{}": {
        "prefix": "arrowFunction =>",
        "body": [
            "const ${1:/*name*/} = ($2) => {\n\t$0\n}",
        ]
    },
    "typeof": {
        "prefix": "typeof",
        "body": [
            "typeof ${1:variable} ${2:===} \"${3:type}\"$0",
        ]
    },
    "instanceof": {
        "prefix": "instanceof",
        "body": [
            "${1:variable} instanceof ${2:\"${3:type}\"})",
        ]
    },
    "short if()": {
        "prefix": "ifShort",
        "body": [
            "if (${1:condition}) $0 ;",
        ]
    },
    "else if{}": {
        "prefix": "else if",
        "body": [
            "else if (${1:condition}) {\n\t$0\n}"
        ]
    },
    "this": {
        "prefix": [
            "this",
            "t"
        ],
        "body": [
            "this.$1 = $1;\n"
        ]
    },
    "Propertie": {
        "prefix": [
            "propertie:",
            "p"
        ],
        "body": [
            "${1:propertie}: ${2:\"${3:}\"},\n"
        ]
    },
    "Method": {
        "prefix": [
            "method()",
        ],
        "body": [
            "${1:name} ($2) {\n\t$0\n}"
        ]
    },
    "RegExp": {
        "prefix": [
            "RegExp",
        ],
        "body": [
            "${1:RegExp} = /^$0$/"
        ]
    },
    "RegExp//": {
        "prefix": [
            "/^$/",
        ],
        "body": [
            "/^$0$/",
        ]
    },
    "obj{}/": {
        "prefix": [
            "obj",
        ],
        "body": [
            "const ${1:/*name*/} = {\n\t$0\n}",
        ]
    },
    "arr[]": {
        "prefix": [
            "arr",
        ],
        "body": [
            "const ${1:name} = [$0]",
        ],
    },
    "JSON.parse()": {
        "prefix": [
            "JSON.parse()",
        ],
        "body": [
            "JSON.parse(\"$0\")",
        ],
    },
    "parse()": {
        "prefix": [
            ".parse()",
        ],
        "body": [
            ".parse(\"$0\")",
        ],
    },
    "JSON.stringify()": {
        "prefix": [
            "JSON.stringify()",
        ],
        "body": [
            "JSON.stringify($0)",
        ],
    },
    "stringify()": {
        "prefix": [
            ".stringify()",
        ],
        "body": [
            ".stringify($0)",
        ],
    },
    //DOM
    "getElementsByTagName": {
        "prefix": [
            ".getElementsByTagName()",
            ".gebtn()"
        ],
        "body": [
            ".getElementsByTagName(\"$0\")",
        ],
    },
    "document.getElementsByTagName": {
        "prefix": [
            "document.getElementsByTagName()",
            "dgebtn()"
        ],
        "body": [
            "document.getElementsByTagName(\"$0\")",
        ],
    },
    "getElementById": {
        "prefix": [
            ".getElementById()",
            ".gebi()"
        ],
        "body": [
            ".getElementById(\"$0\")"
        ]
    },
    "document.getElementById": {
        "prefix": [
            "document.getElementById()",
            "dgebi()"
        ],
        "body": [
            "document.getElementById(\"$0\")"
        ]
    },
    "getElementsByClassName": {
        "prefix": [
            ".getElementsByClassName()",
            ".gebcn()"
        ],
        "body": [
            ".getElementsByClassName(\"$0\")"
        ]
    },
    "document.getElementsByClassName": {
        "prefix": [
            "document.getElementsByClassName()",
            "dgebcn()"
        ],
        "body": [
            "document.getElementsByClassName(\"$0\")"
        ]
    },
    "querySelector": {
        "prefix": [
            ".querySelector()",
            ".qs()"
        ],
        "body": [
            ".querySelector(\"$0\")"
        ]
    },
    "document.querySelector": {
        "prefix": [
            "document.querySelector()",
            "dqs()"
        ],
        "body": [
            "document.querySelector(\"$0\")"
        ]
    },
    "querySelectorAll": {
        "prefix": [
            ".querySelectorAll()",
            ".qsa()"
        ],
        "body": [
            ".querySelectorAll(\"$0\")"
        ]
    },
    "document.querySelectorAll": {
        "prefix": [
            "document.querySelectorAll()",
            "dqsa()"
        ],
        "body": [
            "document.querySelectorAll(\"$0\")"
        ]
    },
    "getAttribute()": {
        "prefix": [
            ".getAttribute()",
            ".ga()"
        ],
        "body": [
            ".getAttribute(\"$0\")"
        ]
    },
    "setAttribute()": {
        "prefix": [
            ".setAttribute()",
            ".sa()"
        ],
        "body": [
            ".setAttribute(\"${1:name}\", \"${0:value}\")"
        ]
    },
    "hasAttribute()": {
        "prefix": [
            ".hasAttribute()",
            ".hatt()"
        ],
        "body": [
            ".hasAttribute(\"$0\")"
        ]
    },
    "removeAttribute()": {
        "prefix": [
            ".removeAttribute()",
            ".ra()"
        ],
        "body": [
            ".removeAttribute(\"$0\")"
        ]
    },

    "snippets credits": {
        "prefix": "snippets credits",
        "body": [
            "/*",
            "/* Snippets HTML [Version 1.1.0]",
            "Last update 08-03-2025 */",
            "By Anthony Vasquez [Thony764]",
            "Todos los derechos reservados",
            "Copyright @2025",
            "/*",
        ]
    },
}
